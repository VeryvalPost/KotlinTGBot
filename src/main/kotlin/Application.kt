package ru.veryval.kotlinTGBot

import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.*
import com.github.kotlintelegrambot.entities.*
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import java.io.InputStream
import java.util.*



data class Message(val role: String, val content: String)
data class Choice(val message: Message)






fun main() {

    val properties = Properties()
    val inputStream: InputStream = object {}.javaClass.getResourceAsStream("/config.properties")
        ?: throw IllegalStateException("–§–∞–π–ª config.properties –Ω–µ –Ω–∞–π–¥–µ–Ω")
    properties.load(inputStream)


    val botToken = properties.getProperty("BOT_TOKEN") ?: throw IllegalStateException("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val admphone = properties.getProperty("PHONE") ?: throw IllegalStateException("PHONE –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val admname = properties.getProperty("NAME") ?: throw IllegalStateException("NAME –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val admlastname = properties.getProperty("LASTNAME") ?: throw IllegalStateException("LASTNAME –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val adminId = properties.getProperty("ADMINCHATID") ?: throw IllegalStateException("ADMINCHATID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    val mytestId = properties.getProperty("VERYVALCHATID") ?: throw IllegalStateException("VERYVALCHATID –Ω–µ –Ω–∞–π–¥–µ–Ω")




    val contactUsers: MutableSet<Contacts> = mutableSetOf()

    val bot = bot {
        token = botToken




        dispatch {
            command("start") {

                val chatId = message.chat.id

                val keyboardMarkup = KeyboardReplyMarkup(keyboard = generateUsersButton(), resizeKeyboard = true, )
                val userName = message.chat.username

                val userContact = Contacts(chatId)
                contactUsers.add(userContact)



                println("User started a chat with the bot: chatID " + chatId.toString() +" Login: "+ userName )
                Logger.logger.info("User started a chat with the bot: chatID" + chatId+" Login: "+ userName)

                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \"–ò–Ω–¥–∏–≥–æ\" üåè\n"+
                "üëá–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –¥—Ä—É–≥—É –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –ò–Ω–¥–∏–≥–æ.\n \n"+
                            "_–í —Å–ª—É—á–∞–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é /share_",
                    replyMarkup = keyboardMarkup,
                    parseMode = ParseMode.MARKDOWN,

                )


            }


            command("share") {
                val chatId = message.chat.id

                val id = bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.",

                )

                contactUsers.find { it.chatId == chatId}?.also { it.stage = "nameStage" }.also { it?.messID = id.first?.body()?.result?.messageId!! }
            }

            text() {
                val chatId = message.chat.id
                val areYouBot = message.from?.isBot
                val currentUser = contactUsers.find { it.chatId == chatId }


                if ((areYouBot == false)&& ((message.messageId - 1)==currentUser?.messID)){


                    val nickname = message.chat.username
                    val msg = message.text




                    if (currentUser?.stage.equals("nameStage")) {

                        contactUsers.find { it.chatId == chatId }?.also {
                            if (msg != null) {
                                it.firstName = msg
                            }
                        }


                        val id=bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω",

                            )
                        contactUsers.find { it.chatId == chatId }?.also { it.stage = "phoneStage" }.also { it?.messID = id.first?.body()?.result?.messageId!! }

                    }



                    if ((currentUser?.stage.equals("phoneStage"))&& ((message.messageId - 1)==currentUser?.messID)) {

                        contactUsers.find { it.chatId == chatId }?.also {
                            if (msg != null) {
                                it.phone = msg
                            }
                        }


                        bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!",

                            )
                        contactUsers.find { it.chatId == chatId }?.also { it.stage = "FinishStage" }

                    }


                    if (currentUser?.stage.equals("FinishStage")) {

                        Logger.logger.info(
                            "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                                    + "–¢–µ–ª:" + currentUser?.phone + "\n"
                                    + "–ò–º—è:" + currentUser?.firstName + "\n"
                                    + "–§–∞–º–∏–ª–∏—è:" + currentUser?.lastName + "\n"
                                    + "–õ–æ–≥–∏–Ω: @" + nickname + "\n"
                        )

                        println(
                            "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                                    + "–¢–µ–ª:" + currentUser?.phone + "\n"
                                    + "–ò–º—è:" + currentUser?.firstName + "\n"
                                    + "–§–∞–º–∏–ª–∏—è:" + currentUser?.lastName + "\n"
                                    + "–õ–æ–≥–∏–Ω: @" + nickname + "\n"
                        )


                        bot.sendMessage(
                            chatId = ChatId.fromId(chatId),
                            text = "–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏. \n " +
                                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é: \n"
                        )

                        bot.sendContact(
                            chatId = ChatId.fromId(chatId),
                            phoneNumber = admphone,
                            firstName = admname,
                            lastName = admlastname
                        )


                        bot.sendMessage(
                            chatId = ChatId.fromId(adminId.toLong()),
                            text = "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                                    + "–¢–µ–ª:" + currentUser?.phone + "\n"
                                    + "–ò–º—è:" + currentUser?.firstName + "\n"
                                    + "–§–∞–º–∏–ª–∏—è:" + currentUser?.lastName + "\n"
                                    + "–õ–æ–≥–∏–Ω: @" + nickname + "\n"
                        )


                        bot.sendMessage(
                            chatId = ChatId.fromId(mytestId.toLong()),
                            text = "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                                    + "–¢–µ–ª:" + currentUser?.phone + "\n"
                                    + "–ò–º—è:" + currentUser?.firstName + "\n"
                                    + "–§–∞–º–∏–ª–∏—è:" + currentUser?.lastName + "\n"
                                    + "–õ–æ–≥–∏–Ω: @" + nickname + "\n"
                        )
                    }
                }
            }


            contact {
                var chatIdClient = ChatId.fromId(message.chat.id)
                val userName = message.chat.username

                Logger.logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                        + "–¢–µ–ª:" + contact.phoneNumber + "\n"
                        + "–ò–º—è:" + contact.firstName + "\n"
                        + "–§–∞–º–∏–ª–∏—è:" + contact.lastName + "\n"
                        + "–õ–æ–≥–∏–Ω: @" + userName + "\n")

                println("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                        + "–¢–µ–ª:" + contact.phoneNumber + "\n"
                        + "–ò–º—è:" + contact.firstName + "\n"
                        + "–§–∞–º–∏–ª–∏—è:" + contact.lastName + "\n"
                        + "–õ–æ–≥–∏–Ω: @" + userName + "\n")


                bot.sendMessage(
                    chatId = chatIdClient,
                    text = "–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π, —Ç–æ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é: \n")

                bot.sendContact(chatId = chatIdClient,phoneNumber = admphone, firstName = admname, lastName = admlastname)


                bot.sendMessage(chatId = ChatId.fromId(adminId.toLong()), text = "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                        + "–¢–µ–ª:" + contact.phoneNumber + "\n"
                        + "–ò–º—è:" + contact.firstName + "\n"
                        + "–§–∞–º–∏–ª–∏—è:" + contact.lastName + "\n"
                        + "–õ–æ–≥–∏–Ω: @" + userName + "\n"
                )


                bot.sendMessage(chatId = ChatId.fromId(mytestId.toLong()),text = "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: \n"
                        + "–¢–µ–ª:" + contact.phoneNumber + "\n"
                        + "–ò–º—è:" + contact.firstName + "\n"
                        + "–§–∞–º–∏–ª–∏—è:" + contact.lastName + "\n"
                        + "–õ–æ–≥–∏–Ω: @" + userName + "\n"
                )


            }
        }
    }

    bot.startPolling()
}


fun generateUsersButton(): List<List<KeyboardButton>> {
    return listOf(
        listOf(KeyboardButton("–ü–æ–¥–∞—Ä–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ", requestContact = true)),
    )
}


